@model IEnumerable<Essentialex.Models.Law>

@{
    ViewData["Title"] = "Lista de Leyes";
}

<h2>@ViewData["Title"]</h2>

<p>
    <a asp-action="Create">Create New</a>
</p>
<div class="row center">
    <div class="input-group">
        <div class="col-lg-4 col-lg-offset-4 col-md-4 col-md-offset-4 col-xs-10 col-xs-offset-1">
            <input type="text" class="form-control" />
            <span class="input-group-btn">
                <a onclick="CallSearch()" class="btn btn-info">Search!</a>
            </span>

        </div>
    </div>
</div>

<div class="row" id="itemLey">
    <div class="row">
        <div class="col-lg-4 col-lg-offset-4 col-md-4 col-md-offset-4 col-xs-10 col-xs-offset-1">
            <div id="pagination">
            </div>
        </div>
    </div>
    <div id="ReplacingNode">
        <div class="list-group" id="LawsPanel">
            <!-- AJAX will load citedby items here -->
        </div>
    </div>
</div>
<script type="text/javascript">


    //window.onload = function () {

    //}

    function pagination(currPage, hits) {
            //var waitingBar = document.getElementById("WaitingForCited");
            //parameters bootstrapPaginator
            var options = {
                currentPage: currPage,
                totalPages: Math.ceil(hits / 10),
                onPageClicked: function (e, originalEvent, type, page) {
                    //waitingBar.hidden = false;
                    CallSearch(page);
                }
            }
            $('#pagination').bootstrapPaginator(options);
    }


    function CallSearch(pageNumb) {
        SelectedPage = pageNumb;

        if (SelectedPage == null) {
            SelectedPage = 1;
        }

        $.ajax({
            type: 'GET',
            url: '/LawViewModels/SearchJson/',
            contentType: 'application/json; charset=utf-8',
            data: {
                page: SelectedPage,
                take: 10
            }
        })
         .success(function (result) {
             var container = document.getElementById("LawsPanel");
             if (result.records.length > 1) {
                 //waitingBar.hidden = true;
                 pagination(pageNumb,result.hits);
                 if (container != null) {
                     if (container.hasChildNodes()) {
                         //get replacing node to clear object
                         var father = document.getElementById("ReplacingNode");
                         //delte element with last information
                         father.removeChild(container);

                         //Creates new element to store new information
                         var preNode = document.createElement('div');
                         preNode.id = "LawsPanel";
                         preNode.className = "list-group panelList";
                         father.appendChild(preNode);
                         container = document.getElementById("LawsPanel");
                     }
                 }

                 $.each(result.records, function () {

                     var preNode = document.createElement('div');
                     preNode.id = "ListLaws";
                     preNode.className = "list-group-item";
                     var anchor = document.createElement('a');

                     //the next line will send the string to be highlited
                     //anchor.href = "/LawViewModels/Details/" + this.Id + "?searchString=" + citedSearch;

                     anchor.href = "/LawViewModels/Details/" + this.Id;
                     anchor.text = this.LawName;
                     preNode.appendChild(anchor);
                     container.appendChild(preNode);

                 });

                 //Loads pagination
                 //pagination(page, result.Hits, citedSearch);
             } else {
                 //waitingBar.hidden = true;
                 var preNode = document.createElement('div');
                 preNode.id = 'NoneLaw';
                 preNode.textContent = 'No Laws found';
                 preNode.className = 'text-center text-muted list-group-item';
                 container.appendChild(preNode);
             }
         });
        
    }
</script>
